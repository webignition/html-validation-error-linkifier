<?php

namespace webignition\HtmlValidationErrorLinkifier\Tests;

use webignition\HtmlValidationErrorLinkifier\HtmlValidationErrorLinkifier;

class HtmlValidationErrorLinkifierTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var HtmlValidationErrorLinkifier
     */
    private $linkifier;

    /**
     * {@inheritdoc}
     */
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->linkifier = new HtmlValidationErrorLinkifier();
    }

    /**
     * @dataProvider linkifyDataProvider
     *
     * @param string $normalForm
     * @param array $parameters
     * @param string $expectedLinkifiedForm
     */
    public function testLinkify($normalForm, $parameters, $expectedLinkifiedForm)
    {
        $this->assertEquals(
            $expectedLinkifiedForm,
            $this->linkifier->linkify($normalForm, $parameters)
        );
    }

    /**
     * @return array
     */
    public function linkifyDataProvider()
    {
        return [
            'basic string' => [
                'normalForm' => 'foo',
                'parameters' => null,
                'expectedLinkifiedForm' => 'foo',
            ],
            'ampersand is replaced with amp (basic)' => [
                'normalForm' => 'foo &amp; bar',
                'parameters' => null,
                'expectedLinkifiedForm' => 'foo-amp-bar',
            ],
            'ampersand is replaced with amp (normalised error)' => [
                'normalForm' => '& did not start a character reference. '
                    .'(& probably should have been escaped as &amp;.)',
                'parameters' => null,
                'expectedLinkifiedForm' => 'ampersand-did-not-start-a-character-reference-'
                    .'ampersand-probably-should-have-been-escaped-as-amp',
            ],
            'replace multiple hyphens with single hyphens' => [
                'normalForm' => 'foo--bar---foobar',
                'parameters' => null,
                'expectedLinkifiedForm' => 'foo-bar-foobar',
            ],
            'single parameter' => [
                'normalForm' => 'Required attribute "%0" not specified',
                'parameters' => [
                    'type'
                ],
                'expectedLinkifiedForm' => 'required-attribute-type-not-specified',
            ],
            'multiple parameters' => [
                'normalForm' => 'Foo %0 not allowed in bar %1',
                'parameters' => [
                    'cat',
                    'dog',
                ],
                'expectedLinkifiedForm' => 'foo-cat-not-allowed-in-bar-dog',
            ],
            'generic placeholders' => [
                'normalForm' => 'Foo %0 not allowed in bar %1',
                'parameters' => null,
                'expectedLinkifiedForm' => 'foo-x-not-allowed-in-bar-y',
            ],
            'remove punctuation (comma)' => [
                'normalForm' => 'foo,bar',
                'parameters' => null,
                'expectedLinkifiedForm' => 'foobar',
            ],
            'remove punctuation (dot)' => [
                'normalForm' => 'foo.bar',
                'parameters' => null,
                'expectedLinkifiedForm' => 'foobar',
            ],
            'remove punctuation (colon)' => [
                'normalForm' => 'foo:bar',
                'parameters' => null,
                'expectedLinkifiedForm' => 'foobar',
            ],
            'remove punctuation (semi-colon)' => [
                'normalForm' => 'foo;bar',
                'parameters' => null,
                'expectedLinkifiedForm' => 'foobar',
            ],
            'remove punctuation (double quote)' => [
                'normalForm' => 'foo"bar',
                'parameters' => null,
                'expectedLinkifiedForm' => 'foobar',
            ],
            'remove punctuation (left bracket)' => [
                'normalForm' => 'foo(bar',
                'parameters' => null,
                'expectedLinkifiedForm' => 'foobar',
            ],
            'remove punctuation (right bracket)' => [
                'normalForm' => 'foo)bar',
                'parameters' => null,
                'expectedLinkifiedForm' => 'foobar',
            ],
            'remove punctuation (slash angle bracket)' => [
                'normalForm' => 'foo/>bar',
                'parameters' => null,
                'expectedLinkifiedForm' => 'foobar',
            ],
            'replace slashes' => [
                'normalForm' => 'foo/bar/foobar',
                'parameters' => null,
                'expectedLinkifiedForm' => 'foo-slash-bar-slash-foobar',
            ],
            'replace spaces' => [
                'normalForm' => 'foo bar foobar',
                'parameters' => null,
                'expectedLinkifiedForm' => 'foo-bar-foobar',
            ],
        ];
    }

    public function testLinkifyIntegrity()
    {
        $errors = file(__DIR__ . '/fixtures/normalised-error-strings.txt');

        foreach ($errors as $error) {
            $error = trim($error);
            $result = $this->linkifier->linkify($error);

            $this->assertInternalType('string', $result);
        }
    }
}
